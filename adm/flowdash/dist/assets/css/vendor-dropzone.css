@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);/*
 * The MIT License
 * Copyright (c) 2012 Matias Meno <m@tias.me>
 */
@-webkit-keyframes passing-through {
  0% {
    opacity: 0;
    transform: translateY(40px);
  }
  30%, 70% {
    opacity: 1;
    transform: translateY(0px);
  }
  100% {
    opacity: 0;
    transform: translateY(-40px);
  }
}
@keyframes passing-through {
  0% {
    opacity: 0;
    transform: translateY(40px);
  }
  30%, 70% {
    opacity: 1;
    transform: translateY(0px);
  }
  100% {
    opacity: 0;
    transform: translateY(-40px);
  }
}
@-webkit-keyframes slide-in {
  0% {
    opacity: 0;
    transform: translateY(40px);
  }
  30% {
    opacity: 1;
    transform: translateY(0px);
  }
}
@keyframes slide-in {
  0% {
    opacity: 0;
    transform: translateY(40px);
  }
  30% {
    opacity: 1;
    transform: translateY(0px);
  }
}
@-webkit-keyframes pulse {
  0% {
    transform: scale(1);
  }
  10% {
    transform: scale(1.1);
  }
  20% {
    transform: scale(1);
  }
}
@keyframes pulse {
  0% {
    transform: scale(1);
  }
  10% {
    transform: scale(1.1);
  }
  20% {
    transform: scale(1);
  }
}
.dropzone {
  position: relative;
  display: flex;
  flex-direction: column;
}

[dir] .dropzone.dz-clickable {
  cursor: pointer;
}

[dir] .dropzone.dz-clickable * {
  cursor: default;
}

[dir] .dropzone.dz-clickable .dz-message, [dir] .dropzone.dz-clickable .dz-message * {
  cursor: pointer;
}

.dropzone.dz-started .dz-message {
  display: none;
}

[dir] .dropzone.dz-drag-hover {
  border-style: solid;
}

.dropzone.dz-drag-hover .dz-message {
  opacity: 0.5;
}

.dropzone .dz-message {
  color: #95aac9;
  order: -1;
}

[dir] .dropzone .dz-message {
  text-align: center;
  padding: 2rem 1rem;
  border: 1px dashed #E2E8EE;
  border-radius: 0.25rem;
  background-color: white;
}

.dropzone .dz-preview:hover {
  z-index: 1000;
}

.dropzone .dz-preview:hover .dz-details {
  opacity: 1;
}

[dir] .dropzone .dz-preview.dz-file-preview .dz-image {
  border-radius: 20px;
  background: #999;
  background: linear-gradient(to bottom, #eee, #ddd);
}

.dropzone .dz-preview.dz-file-preview .dz-details {
  opacity: 1;
}

[dir] .dropzone .dz-preview.dz-image-preview {
  background: white;
}

.dropzone .dz-preview.dz-image-preview .dz-details {
  transition: opacity 0.2s linear;
}

.dropzone .dz-preview .dz-remove {
  font-size: 14px;
  display: block;
}

[dir] .dropzone .dz-preview .dz-remove {
  text-align: center;
  cursor: pointer;
  border: none;
}

.dropzone .dz-preview .dz-remove:hover {
  text-decoration: underline;
}

.dropzone .dz-preview:hover .dz-details {
  opacity: 1;
}

.dropzone .dz-preview .dz-details {
  z-index: 20;
  position: absolute;
  top: 0;
  opacity: 0;
  font-size: 13px;
  min-width: 100%;
  max-width: 100%;
  color: rgba(0, 0, 0, 0.9);
  line-height: 150%;
}

[dir] .dropzone .dz-preview .dz-details {
  padding: 2em 1em;
  text-align: center;
}

[dir=ltr] .dropzone .dz-preview .dz-details {
  left: 0;
}

[dir=rtl] .dropzone .dz-preview .dz-details {
  right: 0;
}

.dropzone .dz-preview .dz-details .dz-size {
  font-size: 16px;
}

[dir] .dropzone .dz-preview .dz-details .dz-size {
  margin-bottom: 1em;
}

.dropzone .dz-preview .dz-details .dz-filename {
  white-space: nowrap;
}

[dir] .dropzone .dz-preview .dz-details .dz-filename:hover span {
  border: 1px solid rgba(200, 200, 200, 0.8);
  background-color: rgba(255, 255, 255, 0.8);
}

.dropzone .dz-preview .dz-details .dz-filename:not(:hover) {
  overflow: hidden;
  text-overflow: ellipsis;
}

[dir] .dropzone .dz-preview .dz-details .dz-filename:not(:hover) span {
  border: 1px solid transparent;
}

[dir] .dropzone .dz-preview .dz-details .dz-filename span, [dir] .dropzone .dz-preview .dz-details .dz-size span {
  background-color: rgba(255, 255, 255, 0.4);
  padding: 0 0.4em;
  border-radius: 3px;
}

.dropzone .dz-preview:hover .dz-image img {
  filter: blur(8px);
}

[dir] .dropzone .dz-preview:hover .dz-image img {
  transform: scale(1.05, 1.05);
}

.dropzone .dz-preview .dz-image {
  overflow: hidden;
  width: 120px;
  height: 120px;
  position: relative;
  display: block;
  z-index: 10;
}

[dir] .dropzone .dz-preview .dz-image {
  border-radius: 20px;
}

.dropzone .dz-preview .dz-image img {
  display: block;
}

[dir=ltr] .dropzone .dz-preview.dz-success .dz-success-mark {
  -webkit-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);
          animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);
}

[dir=rtl] .dropzone .dz-preview.dz-success .dz-success-mark {
  -webkit-animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);
          animation: passing-through 3s cubic-bezier(0.77, 0, 0.175, 1);
}

.dropzone .dz-preview.dz-error .dz-error-mark {
  opacity: 1;
}

[dir=ltr] .dropzone .dz-preview.dz-error .dz-error-mark {
  -webkit-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);
          animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);
}

[dir=rtl] .dropzone .dz-preview.dz-error .dz-error-mark {
  -webkit-animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);
          animation: slide-in 3s cubic-bezier(0.77, 0, 0.175, 1);
}

.dropzone .dz-preview .dz-success-mark, .dropzone .dz-preview .dz-error-mark {
  pointer-events: none;
  opacity: 0;
  z-index: 500;
  position: absolute;
  display: block;
  top: 50%;
}

[dir] .dropzone .dz-preview .dz-success-mark, [dir] .dropzone .dz-preview .dz-error-mark {
  margin-top: -27px;
}

[dir=ltr] .dropzone .dz-preview .dz-success-mark, [dir=ltr] .dropzone .dz-preview .dz-error-mark {
  left: 50%;
  margin-left: -27px;
}

[dir=rtl] .dropzone .dz-preview .dz-success-mark, [dir=rtl] .dropzone .dz-preview .dz-error-mark {
  right: 50%;
  margin-right: -27px;
}

.dropzone .dz-preview .dz-success-mark svg, .dropzone .dz-preview .dz-error-mark svg {
  display: block;
  width: 54px;
  height: 54px;
}

.dropzone .dz-preview.dz-processing .dz-progress {
  opacity: 1;
  transition: all 0.2s linear;
}

.dropzone .dz-preview.dz-complete .dz-progress {
  opacity: 0;
  transition: opacity 0.4s ease-in;
}

[dir=ltr] .dropzone .dz-preview:not(.dz-processing) .dz-progress {
  -webkit-animation: pulse 6s ease infinite;
          animation: pulse 6s ease infinite;
}

[dir=rtl] .dropzone .dz-preview:not(.dz-processing) .dz-progress {
  -webkit-animation: pulse 6s ease infinite;
          animation: pulse 6s ease infinite;
}

.dropzone .dz-preview .dz-progress {
  opacity: 1;
  z-index: 1000;
  pointer-events: none;
  position: absolute;
  height: 16px;
  top: 50%;
  width: 80px;
  -webkit-transform: scale(1);
  overflow: hidden;
}

[dir] .dropzone .dz-preview .dz-progress {
  margin-top: -8px;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 8px;
}

[dir=ltr] .dropzone .dz-preview .dz-progress {
  left: 50%;
  margin-left: -40px;
}

[dir=rtl] .dropzone .dz-preview .dz-progress {
  right: 50%;
  margin-right: -40px;
}

.dropzone .dz-preview .dz-progress .dz-upload {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 0;
  transition: width 300ms ease-in-out;
}

[dir] .dropzone .dz-preview .dz-progress .dz-upload {
  background: #333;
  background: linear-gradient(to bottom, #666, #444);
}

[dir=ltr] .dropzone .dz-preview .dz-progress .dz-upload {
  left: 0;
}

[dir=rtl] .dropzone .dz-preview .dz-progress .dz-upload {
  right: 0;
}

.dropzone .dz-preview.dz-error .dz-error-message {
  display: block;
}

.dropzone .dz-preview.dz-error:hover .dz-error-message {
  opacity: 1;
  pointer-events: auto;
}

.dropzone .dz-preview .dz-error-message {
  pointer-events: none;
  z-index: 1000;
  position: absolute;
  display: block;
  display: none;
  opacity: 0;
  transition: opacity 0.3s ease;
  font-size: 13px;
  top: 130px;
  width: 140px;
  color: white;
}

[dir] .dropzone .dz-preview .dz-error-message {
  border-radius: 8px;
  background: #be2626;
  background: linear-gradient(to bottom, #be2626, #a92222);
  padding: 0.5em 1.2em;
}

[dir=ltr] .dropzone .dz-preview .dz-error-message {
  left: -10px;
}

[dir=rtl] .dropzone .dz-preview .dz-error-message {
  right: -10px;
}

.dropzone .dz-preview .dz-error-message:after {
  content: "";
  position: absolute;
  top: -6px;
  width: 0;
  height: 0;
}

[dir] .dropzone .dz-preview .dz-error-message:after {
  border-bottom: 6px solid #be2626;
}

[dir=ltr] .dropzone .dz-preview .dz-error-message:after {
  left: 64px;
  border-left: 6px solid transparent;
  border-right: 6px solid transparent;
}

[dir=rtl] .dropzone .dz-preview .dz-error-message:after {
  right: 64px;
  border-right: 6px solid transparent;
  border-left: 6px solid transparent;
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/